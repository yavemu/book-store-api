import { Test, TestingModule } from '@nestjs/testing';
import { AuditLoggerService } from '../audit-logger.service';
import { IAuditLoggerRepository } from '../../interfaces/audit-logger.repository.interface';
import { AuditAction } from '../../enums/audit-action.enum';
import { AuditLog } from '../../entities/audit-log.entity';

describe('AuditLoggerService', () => {
  let service: AuditLoggerService;
  let repository: IAuditLoggerRepository;

  const mockAuditLoggerRepository = {
    logUserAction: jest.fn(),
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        AuditLoggerService,
        {
          provide: 'IAuditLoggerRepository',
          useValue: mockAuditLoggerRepository,
        },
      ],
    }).compile();

    service = module.get<AuditLoggerService>(AuditLoggerService);
    repository = module.get<IAuditLoggerRepository>('IAuditLoggerRepository');
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  describe('logOperation', () => {
    it('should call repository.logUserAction with correct parameters', async () => {
      const params = {
        performedBy: 'user1',
        entityId: 'entity1',
        action: AuditAction.CREATE,
        details: 'details',
        entityType: 'entityType',
      };
      const auditLog = new AuditLog();
      mockAuditLoggerRepository.logUserAction.mockResolvedValue(auditLog);

      const result = await service.logOperation(
        params.performedBy,
        params.entityId,
        params.action,
        params.details,
        params.entityType,
      );

      expect(repository.logUserAction).toHaveBeenCalledWith(
        params.performedBy,
        params.entityId,
        params.action,
        params.details,
        params.entityType,
      );
      expect(result).toEqual(auditLog);
    });
  });

  describe('log', () => {
    it('should call logOperation with correct parameters', async () => {
        const params = {
            performedBy: 'user1',
            entityId: 'entity1',
            action: AuditAction.CREATE,
            details: 'details',
            entityType: 'entityType',
          };
          const auditLog = new AuditLog();
          mockAuditLoggerRepository.logUserAction.mockResolvedValue(auditLog);

          const result = await service.log(
            params.performedBy,
            params.entityId,
            params.action,
            params.details,
            params.entityType,
          );

          expect(repository.logUserAction).toHaveBeenCalledWith(
            params.performedBy,
            params.entityId,
            params.action,
            params.details,
            params.entityType,
          );
          expect(result).toEqual(auditLog);
    });
  });
});
